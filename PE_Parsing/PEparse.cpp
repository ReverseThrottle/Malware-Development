/*
      PE Parser
      Created by: ReverseThrottle
      Goal of program is help myself nderstand the PE File format
      No ground breaking new infomation all old resources

      Resources:
      - https://www.ired.team/miscellaneous-reversing-forensics/windows-kernel-internals/pe-file-header-parser-in-c++#the-big-hurdle
      - https://0xrick.github.io/win-internals/pe8/#introduction
*/

#include <Windows.h>
#include "intrin.h"
#include <iostream>

int main(int argc, char* argv[])
{
    char filename[MAX_PATH] = { 0 };
    DWORD bytesRead = NULL;

    if (argc != 2) {
        printf("[!] Did not supply file path..\n");
        return 1;
    }

    memcpy_s(filename, MAX_PATH, argv[1], MAX_PATH);

    HANDLE file = CreateFileA(filename, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
    if (file == INVALID_HANDLE_VALUE) {
        printf("[!] Could not retreive file handle\n[!] Make sure file exists: %s\n", filename);
        return 1;
    }

    DWORD fileSize = GetFileSize(file, NULL);
    LPVOID fileData = HeapAlloc(GetProcessHeap(), 0, fileSize);

    BOOL readFileSucc = ReadFile(file, fileData, fileSize, &bytesRead, NULL);
    if (readFileSucc == 0) {
        printf("[!] Failed to read file...\n[!] Error code: %d", GetLastError());
        return 1;
    }

    // DOS HEADER
    PIMAGE_DOS_HEADER dos_header = (PIMAGE_DOS_HEADER)fileData;
    printf("File being parsed: %s\n", filename);
    printf("File offset in memory: 0x%llx\n\n", fileData);

    printf("\n----------------------------------------------------------\n");
    printf("|----------DOS HEADER------------------------------------|\n");
    printf("----------------------------------------------------------\n");
    printf("\t[*] Magic Number: 0x%x\n", dos_header->e_magic);
    printf("\t[*] Bytes on last page file: 0x%x\n", dos_header->e_cblp);
    printf("\t[*] Pages in file: 0x%x\n", dos_header->e_cp);
    printf("\t[*] Relocation: 0x%x\n", dos_header->e_crlc);
    printf("\t[*] Size of header in paragraphs: 0x%x\n", dos_header->e_cparhdr);
    printf("\t[*] Initial (relative) SS value: 0x%x\n", dos_header->e_ss);
    printf("\t[*] Initial SP value: 0x%x\n", dos_header->e_sp);
    printf("\t[*] File address of relocation table: 0x%x\n", dos_header->e_lfarlc);
    printf("\t[*] Overlay number: 0x%x\n", dos_header->e_ovno);
    printf("\t[*] OEM identifier: 0x%x\n", dos_header->e_oemid);
    printf("\t[*] OEM information: 0x%x\n", dos_header->e_oeminfo);
    printf("\t[*] File address exe header: 0x%x\n", dos_header->e_lfanew);

    // NT HEADERS / FILE HEADER
    PIMAGE_NT_HEADERS64 imageNTHeaders = (PIMAGE_NT_HEADERS64)((DWORDLONG)fileData + dos_header->e_lfanew);

    printf("\n----------------------------------------------------------\n");
    printf("|------------NT HEADERS----------------------------------|\n");
    printf("----------------------------------------------------------\n");
    printf("\t[*] File offset: 0x%llx + DOS Header->e_lfanew: 0x%llx = NT Header address: 0x%llx\n", fileData, dos_header->e_lfanew, imageNTHeaders);
    printf("\t[*] NT Header Signature: 0x%x\n", imageNTHeaders->Signature);

    printf("\n\n\t[*] File Header\n");
    WORD machineArc = imageNTHeaders->FileHeader.Machine;
    printf("\t[*] NT Header Machine: 0x%x\n", imageNTHeaders->FileHeader.Machine);
    if (machineArc == 0x8664) printf("\t\t[-] CPU is AMD64\n");
    else if (machineArc == 0x14c) printf("\t\t[-] CPU is Intel 386\n");
    else printf("\t\t[-] Unable to determine CPU\n");
    printf("\t[*] NT Header Number of Sections: 0x%x\n", imageNTHeaders->FileHeader.NumberOfSections);
    printf("\t[*] NT Header Time Date Stamp: 0x%x\n", imageNTHeaders->FileHeader.TimeDateStamp);
    printf("\t[*] NT Header Pointer to Symbol Table: 0x%x\n", imageNTHeaders->FileHeader.PointerToSymbolTable);
    printf("\t[*] NT Header Number of Symbols: 0x%x\n", imageNTHeaders->FileHeader.NumberOfSymbols);
    printf("\t[*] NT Header Size of Optional Header: 0x%x\n", imageNTHeaders->FileHeader.SizeOfOptionalHeader);
    printf("\t[*] NT Header Characteristics: 0x%x\n", imageNTHeaders->FileHeader.Characteristics);

    //OPTIONAL HEADER
    printf("\n----------------------------------------------------------\n");
    printf("|------------OPTIONAL HEADERS----------------------------|\n");
    printf("----------------------------------------------------------\n");
   
    WORD magic = imageNTHeaders->OptionalHeader.Magic;
    printf("\t[*] Magic: 0x%x\n", magic);
    if (magic == 0x10B) printf("\t\t[-] File is 32 bit executable!\n");
    else if (magic == 0x20B) printf("\t\t[-] File is 64 bit executable!\n");
    else printf("\t\t[-] File is ROM image!\n");

    printf("\t[*] Major Linker Version: 0x%x\n", imageNTHeaders->OptionalHeader.MajorLinkerVersion);
    printf("\t[*] Minor Linker Version: 0x%x\n", imageNTHeaders->OptionalHeader.MinorLinkerVersion);
    printf("\t[*] Size of Code: 0x%x\n", imageNTHeaders->OptionalHeader.SizeOfCode);
    printf("\t[*] Size of Initialized Data: 0x%x\n", imageNTHeaders->OptionalHeader.SizeOfInitializedData);
    printf("\t[*] Size of Uninitialized Data: 0x%x\n", imageNTHeaders->OptionalHeader.SizeOfUninitializedData);
    printf("\t[*] Address of Entry Point: 0x%x\n", imageNTHeaders->OptionalHeader.AddressOfEntryPoint);
    printf("\t[*] Base of Code: 0x%x\n", imageNTHeaders->OptionalHeader.BaseOfCode);
    printf("\t[*] Image Base: 0x%llx\n", imageNTHeaders->OptionalHeader.ImageBase);
    printf("\t[*] Section Alignment: 0x%x\n", imageNTHeaders->OptionalHeader.SectionAlignment);
    printf("\t[*] File Alignment: 0x%x\n", imageNTHeaders->OptionalHeader.FileAlignment);
    printf("\t[*] Major OS Version: 0x%x\n", imageNTHeaders->OptionalHeader.MajorOperatingSystemVersion);
    printf("\t[*] Minor OS Version: 0x%x\n", imageNTHeaders->OptionalHeader.MinorOperatingSystemVersion);
    printf("\t[*] Major Image Version: 0x%x\n", imageNTHeaders->OptionalHeader.MajorImageVersion);
    printf("\t[*] Minor Image Version: 0x%x\n", imageNTHeaders->OptionalHeader.MinorImageVersion);
    printf("\t[*] Win32 Version Value: 0x%x\n", imageNTHeaders->OptionalHeader.Win32VersionValue);
    printf("\t[*] Size of Image: 0x%x\n", imageNTHeaders->OptionalHeader.SizeOfImage);
    printf("\t[*] Size of Headers: 0x%x\n", imageNTHeaders->OptionalHeader.SizeOfHeaders);
    printf("\t[*] Checksum: 0x%x\n", imageNTHeaders->OptionalHeader.CheckSum);
    printf("\t[*] Subsystem: 0x%x\n", imageNTHeaders->OptionalHeader.Subsystem);
    printf("\t[*] DLL Characteristics: 0x%x\n", imageNTHeaders->OptionalHeader.DllCharacteristics);
    printf("\t[*] Size of Stack Reserve: 0x%llx\n", imageNTHeaders->OptionalHeader.SizeOfStackReserve);
    printf("\t[*] Size of Stack Commit: 0x%llx\n", imageNTHeaders->OptionalHeader.SizeOfStackCommit);
    printf("\t[*] Size of Heap Reserve: 0x%llx\n", imageNTHeaders->OptionalHeader.SizeOfHeapReserve);
    printf("\t[*] Size of Heap Commit: 0x%llx\n", imageNTHeaders->OptionalHeader.SizeOfHeapCommit);
    printf("\t[*] Loader Flags: 0x%x\n", imageNTHeaders->OptionalHeader.LoaderFlags);
    printf("\t[*] Number of RVA and Sizes: 0x%x\n", imageNTHeaders->OptionalHeader.NumberOfRvaAndSizes);



    // DATA DIRECTORIES
    printf("\n----------------------------------------------------------\n");
    printf("|------------Data Directories----------------------------|\n");
    printf("----------------------------------------------------------\n");

    printf("\t[*] Export Directory: 0x%x\n", imageNTHeaders->OptionalHeader.DataDirectory[0].VirtualAddress, imageNTHeaders->OptionalHeader.DataDirectory[0].Size);
    printf("\t[*] Import Directory: 0x%x\n", imageNTHeaders->OptionalHeader.DataDirectory[1].VirtualAddress, imageNTHeaders->OptionalHeader.DataDirectory[1].Size);
    printf("\t[*] Resource Directory: 0x%x\n", imageNTHeaders->OptionalHeader.DataDirectory[2].VirtualAddress, imageNTHeaders->OptionalHeader.DataDirectory[2].Size);
    printf("\t[*] Exception Directory: 0x%x\n", imageNTHeaders->OptionalHeader.DataDirectory[3].VirtualAddress, imageNTHeaders->OptionalHeader.DataDirectory[3].Size);
    printf("\t[*] Security Directory: 0x%x\n", imageNTHeaders->OptionalHeader.DataDirectory[4].VirtualAddress, imageNTHeaders->OptionalHeader.DataDirectory[4].Size);
    printf("\t[*] Base Relocation Table: 0x%x\n", imageNTHeaders->OptionalHeader.DataDirectory[5].VirtualAddress, imageNTHeaders->OptionalHeader.DataDirectory[5].Size);
    printf("\t[*] Debug Directory: 0x%x\n", imageNTHeaders->OptionalHeader.DataDirectory[6].VirtualAddress, imageNTHeaders->OptionalHeader.DataDirectory[6].Size);
    printf("\t[*] Architecture Specific Data: 0x%x\n", imageNTHeaders->OptionalHeader.DataDirectory[7].VirtualAddress, imageNTHeaders->OptionalHeader.DataDirectory[7].Size);
    printf("\t[*] RVA of GlobalPtr: 0x%x\n", imageNTHeaders->OptionalHeader.DataDirectory[8].VirtualAddress, imageNTHeaders->OptionalHeader.DataDirectory[8].Size);
    printf("\t[*] TLS Directory: 0x%x\n", imageNTHeaders->OptionalHeader.DataDirectory[9].VirtualAddress, imageNTHeaders->OptionalHeader.DataDirectory[9].Size);
    printf("\t[*] Load Configuration Directory: 0x%x\n", imageNTHeaders->OptionalHeader.DataDirectory[10].VirtualAddress, imageNTHeaders->OptionalHeader.DataDirectory[10].Size);
    printf("\t[*] Bound Import Directory: 0x%x\n", imageNTHeaders->OptionalHeader.DataDirectory[11].VirtualAddress, imageNTHeaders->OptionalHeader.DataDirectory[11].Size);
    printf("\t[*] Import Address Table: 0x%x\n", imageNTHeaders->OptionalHeader.DataDirectory[12].VirtualAddress, imageNTHeaders->OptionalHeader.DataDirectory[12].Size);
    printf("\t[*] Delay Load Import Descriptors: 0x%x\n", imageNTHeaders->OptionalHeader.DataDirectory[13].VirtualAddress, imageNTHeaders->OptionalHeader.DataDirectory[13].Size);
    printf("\t[*] .NET Header: 0x%x\n", imageNTHeaders->OptionalHeader.DataDirectory[14].VirtualAddress, imageNTHeaders->OptionalHeader.DataDirectory[14].Size);

    // SECTION HEADERS




    return 0;
}
