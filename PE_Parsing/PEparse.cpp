/*
      PE Parser
      Created by: ReverseThrottle
      Goal of program is help myself nderstand the PE File format 
      No ground breaking new infomation all old resources
      
      Resources:
      - https://www.ired.team/miscellaneous-reversing-forensics/windows-kernel-internals/pe-file-header-parser-in-c++#the-big-hurdle
      - https://0xrick.github.io/win-internals/pe8/#introduction
*/

#include <Windows.h>
#include "intrin.h"
#include <iostream>

int main(int argc, char* argv[])
{
    char filename[MAX_PATH] = { 0 };
    DWORD bytesRead = NULL;
    PIMAGE_DOS_HEADER dos_header = {};

    if (argc != 2) {
        printf("[!] Did not supply file path..\n");
        return 1;
    }

    memcpy_s(filename, MAX_PATH, argv[1], MAX_PATH);

    HANDLE file = CreateFileA(filename, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
    if (file == INVALID_HANDLE_VALUE) {
        printf("[!] Could not retreive file handle\n[!] Make sure file exists: %s\n", filename);
        return 1;
    }

    DWORD fileSize = GetFileSize(file, NULL);
    LPVOID fileData = HeapAlloc(GetProcessHeap(), 0, fileSize);

    BOOL readFileSucc = ReadFile(file, fileData, fileSize, &bytesRead, NULL);
    if (readFileSucc == 0) {
        printf("[!] Failed to read file...\n[!] Error code: %d", GetLastError());
        return 1;
    }

    dos_header = (PIMAGE_DOS_HEADER)fileData;

    printf("-----------DOS HEADER-------------\n");
    printf("\t[*] Magic Number: 0x%x\n", dos_header->e_magic);
    printf("\t[*] File address exe header: 0x%x\n", dos_header->e_lfanew);

    
    
    PIMAGE_NT_HEADERS imageNTHeaders = (PIMAGE_NT_HEADERS)((DWORD)fileData + dos_header->e_lfanew);

    printf("-------------NT HEADERS-------------\n");
    printf("\t[*] NT Header address: 0x%x\n", imageNTHeaders);

}
