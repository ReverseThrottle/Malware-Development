#include <iostream>
#include <Windows.h>
#include "coffldr.h"


int main(int argc, char* argv[])
{
    HANDLE hFile = NULL;
    PCHAR File = NULL;
    PVOID FileMem = NULL;
    DWORD FileMemSize = 0;
    DWORD dwBytesRead = 0;
    LPVOID sectionsAddressMemory[17];
    LPVOID GOTFunctionMap = NULL;
    CoffHeader* coffHeader = NULL;
    CoffSection* coffSection = NULL;
    CoffReloc* coffReloc = NULL;
    CoffSymbol* coffSymbol = NULL;

    if (argc < 1) {
        printf("Did not supply command line arguments");
    }

    File = argv[1];

    // Load Object file into memory
    hFile = CreateFileA(File, GENERIC_READ, 0, 0, OPEN_ALWAYS, 0, 0);
    if (hFile == INVALID_HANDLE_VALUE) {
        printf("Error read object file!/nError Code: %d", GetLastError());
        return -1;
    }

    FileMemSize = GetFileSize(hFile, 0);
    FileMem = (PBYTE)LocalAlloc(LPTR, FileMemSize);
    ReadFile(hFile, FileMem, FileMemSize, &dwBytesRead, 0);
    printf("----COFF HEADER----\n");
    coffHeader = (CoffHeader*)FileMem;
    printf("Machine: 0x%X\n", coffHeader->machine);
    WORD machine = coffHeader->machine;
    if (machine == 332) {
        printf("\tIntel 386\n");
    }
    else if (machine == 34404) {
        printf("\tx64\n");
    }

    printf("Number of Sections: %d\n", coffHeader->numberOfSections);
    printf("Pointer to Symbol Table: 0x%X\n", coffHeader->pointerToSymbolTable);
    printf("Number of Symbols: %d\n", coffHeader->numberOfSymbols);
    printf("Size of OptionalcoffHeader: %d\n", coffHeader->sizeOfOptionalHeader);
    printf("Characteristics: %d\n\n", coffHeader->characteristics);

    printf("----SYMBOL TABLE LOCATION----\n");
    coffSymbol = (CoffSymbol*)((char*)FileMem + coffHeader->pointerToSymbolTable);
    printf("Symbol Table: 0x%p\n\n", coffSymbol);

    printf("----SECTIONS----\n");
    for (int counter = 0; counter < coffHeader->numberOfSections; counter++) {
        coffSection = (CoffSection*)((char*)FileMem + sizeof(CoffHeader) + (sizeof(CoffSection) * counter));
        printf("Section %d\n", counter);
        printf("\n\nName: %s\n", coffSection->name);
        printf("VirtualSize: 0x%X\n", coffSection->virtualSize);
        printf("Virtual Address: 0x%X\n", coffSection->virtualAddress);
        printf("Size of Raw Data: 0x%X\n", coffSection->sizeOfRawData);
        printf("Pointer to Relocation: 0x%X\n", coffSection->pointerToRelocations);
        printf("Pointer to Raw Data: 0x%X\n", coffSection->pointerToRawData);
        printf("Number of Relocations: %d\n", coffSection->numberOfRelocations);
        printf("Characteristics: %X\n", coffSection->characteristics);
        printf("\n");
        sectionsAddressMemory[counter] = VirtualAlloc(NULL, coffSection->sizeOfRawData, MEM_COMMIT | MEM_RESERVE | MEM_TOP_DOWN, PAGE_EXECUTE_READWRITE);
        CopyMemory(sectionsAddressMemory[counter], ((char*)FileMem + coffSection->pointerToRawData), coffSection->sizeOfRawData);
        printf("Alloacted Section %d at %p\n", counter, sectionsAddressMemory[counter]);
        printf("-------------------------\n");
    }


    GOTFunctionMap = VirtualAlloc(NULL, 2048, MEM_COMMIT | MEM_RESERVE | MEM_TOP_DOWN, PAGE_EXECUTE_READWRITE);

    //printf("\n\n----RELOCATIONS----\n");
    //for (int counter = 0; counter < coffHeader->numberOfSections; counter++) {
    //    printf("\n\nRelocations of section: %d\n", counter);
    //    coffSection = (CoffSection*)((char*)FileMem + sizeof(coffHeader) + (sizeof(coffSection) * counter));
    //    coffReloc = (CoffReloc*)((char*)FileMem + coffSection->pointerToRelocations);
    //    printf("Number of Relocations in Section %d\n", coffSection->numberOfRelocations);
    //    for (int relocount = 0; relocount < coffSection->numberOfRelocations; relocount++) {
    //        printf("\n\nVirtual Address: 0x%X\n", coffReloc->virtualAddress);
    //        printf("Symbol Table Index: 0x%X\n", coffReloc->symbolTableIndex);
    //        printf("Type: 0x%X\n", coffReloc->type);
    //        printf("\n");
    //        if (coffSymbol[coffReloc->symbolTableIndex].first.name[0] != 0) {
    //            uint32_t symptr = coffSymbol[coffReloc->symbolTableIndex].first.name[1];
    //            printf("Symbol PTR: 0x%X\n", symptr);
    //            printf("SysName: %s\n", coffSymbol[coffReloc->symbolTableIndex].first.name);
    //            printf("Section Number: 0x%X\n", coffSymbol[coffReloc->symbolTableIndex].sectionNumber);
    //            printf("\n");
    //        }
    //    }
    //    printf("-------------------------");
    //}
   

    //printf("\n\n----RELOCATIONS----\n");
    //for (int counter = 0; counter < coffHeader->numberOfSections; counter++) {
    //    printf("\nRelocations of section %d\n", counter);
    //    coffSection = (CoffSection*)((char*)FileMem + sizeof(CoffHeader) + (sizeof(CoffSection) * counter));
    //    coffReloc = (CoffReloc*)((char*)FileMem + coffSection->pointerToRelocations);
    //    printf("Number of Relocations in Section %d\n", coffSection->numberOfRelocations);
    //    for (int relocount = 0; relocount < coffSection->numberOfRelocations; relocount++) {
    //        printf("\n\nVirtual Address: 0x%X\n", coffReloc->virtualAddress);
    //        printf("Symbol Table Index: 0x%X\n", coffReloc->symbolTableIndex);
    //        printf("Type: 0x%X\n", coffReloc->type);
    //        printf("\n");
    //        if (coffSymbol[coffReloc->symbolTableIndex].first.name[0] != 0) {
    //            uint32_t symptr = coffSymbol[coffReloc->symbolTableIndex].first.name[1];
    //            printf("Symbol PTR: 0x%X\n", symptr);
    //            printf("SysName: %s\n", coffSymbol[coffReloc->symbolTableIndex].first.name);
    //            printf("Section Number: 0x%X\n", coffSymbol[coffReloc->symbolTableIndex].sectionNumber);
    //            printf("\n");
    //        }
    //    }
    //    printf("----------------------------------");
    //}

    for (int counter = 0; counter < coffHeader->numberOfSections; counter++) {
        printf("Doing Relocations of section: %d\n", counter);
        coffSection = (CoffSection*)((char*)FileMem + sizeof(coffHeader) + (sizeof(coffSection) * counter));
        coffReloc = (CoffReloc*)((char*)FileMem + coffSection->pointerToRelocations);
        for (int reloccount = 0; reloccount < coffSection->numberOfRelocations; reloccount++) {
            printf("\tVirtualAddress: 0x%X\n", coffReloc->virtualAddress);
            printf("\tSymbolTableIndex: 0x%X\n", coffReloc->symbolTableIndex);
            printf("\tType: 0x%X\n", coffReloc->type);
            if (coffSymbol[coffReloc->symbolTableIndex].first.name[0] != 0) {
                uint32_t symptr = coffSymbol[coffReloc->symbolTableIndex].first.value[1];
                printf("\tSymPtr: 0x%X\n", symptr);
                printf("\tSymName: %s\n", coffSymbol[coffReloc->symbolTableIndex].first.name);
                printf("\tSectionNumber: 0x%X\n", coffSymbol[coffReloc->symbolTableIndex].sectionNumber);

            }
        }

    }
}
